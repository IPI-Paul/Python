#!/usr/bin/env python3

# Example 15-20
# Recodes the main page as an executable script and populates the response HTML
# with values imported from the common module file in the previous example
# Author: Mark Lutz
# Last modified: 

"""
generate HTML for mail page dynamically from an executable Python script, not a
precoded HTML file; this lets us import the expected input field name and the 
selection table values from a common Python module file; changes in either now 
only have to be made in one place, the Python module file;
"""

REPLY = """Content-type: text/html

<html>
    <title>Languages2</title>
    <body>
        <h1>Hello World</h1>
        <p>
            Similar to file <a href="../ch15_languages.html">languages.html</a>,
            but this page is dynamically generated by a Python CGI script, using
            selection list and input field na,es imported from a common Python 
            module on the server. Only the common module must be maintained as
            new languages are added, because it is shared with the reply script.
            
            To see the code that generates this page and the reply, click 
            <a href="ch15_getfile.py?filename=cgi-bin\ch15_languages2.py">here</a>,
            <a href="ch15_getfile.py?filename=cgi-bin\ch15_languages2reply.py">here</a>,
            <a href="ch15_getfile.py?filename=cgi-bin\ch15_languages2common.py">here</a>, and
            <a href="ch15_getfile.py?filename=cgi-bin\ch15_formMockup.py">here</a>.
        </p>
        <hr />
        <form method="POST" action="ch15_languages2reply.py">
            <p>
                <b>Select a programming language:</b>
            </p>
            <p>
                <select name="%s">
                    <option> All</option>
                    %s
                    <option>Other</option>
                </select>
            </p>
            <p>
                <input type="submit" />
            </p>
        </form>
    </body>
</html>
"""

from ch15_languages2common import hellos, inputkey

options = []
for lang in hellos:                                 # we could sort keys too
    options.append('<option>%s</option>' % lang)    # wrap table keys in HTML code
options = '\n\t\t    '.join(options)
print(REPLY % (inputkey, options))          # field name and values from module