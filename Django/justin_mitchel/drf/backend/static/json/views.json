{
  "views": {
    "1": {
        "name": "api_01_home_01",
        "methods": ["GET"],
        "url": "api_01/01",
        "type": "function",
        "title": "Create your first API View",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Uses django.http JsonResponse to return a text message."
    },
    "2": {
        "name": "api_01_home_02",
        "methods": ["GET"],
        "url": "api_01/02",
        "type": "function",
        "title": "Create your first API View",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Prints the query param, collects the request.META, prints the request headers then uses django.http JsonResponse to return the request.content_type.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"query": "Hello World!"},
        "params": {"abc": 123}
    },
    "3": {
        "name": "api_02_home_01",
        "methods": ["GET"],
        "url": "api_02/01",
        "type": "function",
        "title": "Django Model Instance as an API Response",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Loads the Product model from products_01 and retrieves the data into a Python dict then uses django.http JsonResponse to return the new data object.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"product_id": 123}
    },
    "4": {
        "name": "api_02_home_02",
        "methods": ["GET"],
        "url": "api_02/02",
        "type": "function",
        "title": "Django Model Instance as an API Response",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Loads the Product model from products_01 and uses django.forms.models model_to_dict to retrieve specified fields into a Python dict then uses django.http JsonResponse to return the new data object.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"product_id": 123}
    },
    "5": {
        "name": "api_02_home_03",
        "methods": ["GET"],
        "url": "api_02/03",
        "type": "function",
        "title": "Django Model Instance as an API Response",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Loads the Product model from products_01 and uses django.forms.models model_to_dict to retrieve specified fields into a Python dict then converts decimal values into string values before using django.http HttpResponse to return the new data object.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"product_id": 123}
    },
    "6": {
        "name": "api_03_home_01",
        "methods": ["GET"],
        "url": "api_03/01",
        "type": "function",
        "title": "Rest Framework View & Response",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Loads the Product model from products_01 and uses rest_framework.decorators api_view to restrict use to GET requests only. Then uses django.forms.models model_to_dict to retrieve specified fields into a Python dict and rest_framework.response Response to return the first item in data.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"product_id": 123}
    },
    "7": {
        "name": "api_03_home_01",
        "methods": ["POST"],
        "url": "api_03/01",
        "type": "function",
        "title": "Rest Framework View & Response",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Loads the Product model from products_01 and uses rest_framework.decorators api_view to restrict use to GET requests only and returns error when using POST.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello World!"}
    },
    "8": {
        "name": "api_03_home_02",
        "methods": ["GET"],
        "url": "api_03/02",
        "type": "function",
        "title": "Rest Framework View & Response",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Loads the Product model from products_01 and uses rest_framework.decorators api_view to restrict use to GET and POST requests only. Then checks the request.method and uses rest_framework.response Response to return a message as not POST.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"product_id": 123}
    },
    "9": {
        "name": "api_03_home_02",
        "methods": ["POST"],
        "url": "api_03/02",
        "type": "function",
        "title": "Rest Framework View & Response",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Loads the Product model from products_01 and uses rest_framework.decorators api_view to restrict use to GET and POST requests only. Then checks the request.method and uses django.forms.models model_to_dict to retrieve specified fields into a Python dict and uses rest_framework.response Response to return the first item in the data.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello World!"}
    },
    "10": {
        "name": "api_04_home",
        "methods": ["GET"],
        "url": "api_04",
        "type": "function",
        "title": "Django Rest Framework Model Serializers",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Loads the Product model from products_02 and retrieves an instance before using the ProductSerializer from products_02 to turn the instance into a Python dict and uses rest_framework.response Response to return the data.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"product_id": 123}
    },
    "11": {
        "name": "api_05_home_01",
        "methods": ["POST"],
        "url": "api_05/01",
        "type": "function",
        "title": "Injest Data with Django Rest Framework",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Uses django.http JsonResponse to return request.data. <span class=warning>Will only work if CSRF cookie is set!</span>",
        "json": {"product_id": 123}
    },
    "12": {
        "name": "api_05_home_02",
        "methods": ["GET"],
        "url": "api_05/02",
        "type": "function",
        "title": "Injest Data with Django Rest Framework",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Uses rest_framework.decorators api_view to restrict use to POST requests only.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"product_id": 123},
        "load_content": true
    },
    "13": {
        "name": "api_05_home_02",
        "methods": ["POST"],
        "url": "api_05/02",
        "type": "function",
        "title": "Injest Data with Django Rest Framework",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Uses rest_framework.decorators api_view to restrict use to POST requests only and django.http JsonResponse to return request.data.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello World!"}
    },
    "14": {
        "name": "api_05_home_03",
        "methods": ["GET"],
        "url": "api_05/03",
        "type": "function",
        "title": "Injest Data with Django Rest Framework",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Uses rest_framework.decorators api_view to restrict use to POST requests only.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"product_id": 123},
        "load_content": true
    },
    "15": {
        "name": "api_05_home_03",
        "methods": ["POST"],
        "url": "api_05/03",
        "type": "function",
        "title": "Injest Data with Django Rest Framework",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Loads the Product model and ProductSerializer from products_03 and uses the ProductSerializer to injest request.data. Checks if the serializer.is_valid and if not raises an exception otherwise uses rest_framework.response Response to return request.data.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello World!"}
    },
    "16": {
        "name": "api_05_home_04",
        "methods": ["GET"],
        "url": "api_05/04",
        "type": "function",
        "title": "Injest Data with Django Rest Framework",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Uses rest_framework.decorators api_view to restrict use to POST requests only.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"product_id": 123},
        "load_content": true
    },
    "17": {
        "name": "api_05_home_04",
        "methods": ["POST"],
        "url": "api_05/04",
        "type": "function",
        "title": "Injest Data with Django Rest Framework",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Loads the Product model and ProductSerializer from products_03 and uses the ProductSerializer to injest request.data. Checks if the serializer.is_valid and if not raises an exception and uses rest_framework.response Response to return a message otherwise uses rest_framework.response Response to return request.data.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello World!"}
    },
    "18": {
        "name": "api_06_home",
        "methods": ["POST"],
        "view": "01",
        "url": "api_06",
        "type": "function",
        "title": "Django Rest Framework Generics RetrieveAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Leaves out title then loads the Product model and ProductSerializer from products_03 and uses the ProductSerializer to retrieve request.data. Checks if the serializer.is_valid and raises an exception and uses rest_framework.response Response to return a message.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"content": "Hello world"}
    },
    "19": {
        "name": "api_06_home",
        "methods": ["POST"],
        "view": "02",
        "url": "api_06",
        "type": "function",
        "title": "Django Rest Framework Generics RetrieveAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Passes in a null title then loads the Product model and ProductSerializer from products_03 and uses the ProductSerializer to retrieve request.data. Checks if the serializer.is_valid and  raises an exception and uses rest_framework.response Response to return a message.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": null, "content": "Hello world"}
    },
    "20": {
        "name": "api_06_home",
        "methods": ["POST"],
        "view": "03",
        "url": "api_06",
        "type": "function",
        "title": "Django Rest Framework Generics RetrieveAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/basic.py"],
        "special_note": "",
        "description": "Passes in text for price then loads the Product model and ProductSerializer from products_03 and uses the ProductSerializer to retrieve request.data. Checks if the serializer.is_valid and if not raises an exception and uses rest_framework.response Response to return a message otherwise uses rest_framework.response Response to return request.data.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "ABC123", "content": "Hello world", "price": "abc134"}
    },
    "21": {
        "name": "api_06_products_03_detail_view",
        "methods": ["GET"],
        "view": "01",
        "url": "api_06/products_03/1",
        "detail": "api_06/products_03/",
        "type": "class",
        "title": "Django Rest Framework Generics RetrieveAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "",
        "description": "Uses generics.RetrieveAPIView from rest_framework generics to retrieve the Product queryset from products_03 and uses serializers.ModelSerializer from rest_framework serializers to determine the output.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "22": {
        "name": "api_06_products_03_create_view",
        "methods": ["POST"],
        "view": "01",
        "url": "api_06/products_03",
        "type": "class",
        "title": "Django Rest Framework Generics CreateAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py"],
        "special_note": "",
        "description": "Uses generics.CreateAPIView from rest_framework generics to retrieve the Product queryset from products_03 and uses serializers.ModelSerializer from rest_framework serializers to determine the output.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes and ensure to add view: 01</span>.",
        "json": {"view": "01", "title": "This field is done", "price": 32.99}
    },
    "23": {
        "name": "api_06_products_03_create_view",
        "methods": ["POST"],
        "view": "02",
        "url": "api_06/products_03",
        "type": "class",
        "title": "Django Rest Framework Generics CreateAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py"],
        "special_note": "",
        "description": "Uses generics.CreateAPIView from rest_framework generics to retrieve the Product queryset from products_03 and uses serializers.ModelSerializer from rest_framework serializers to determine the output. Then uses the perform_create function of generics.CreateAPIView to save the serializer.validated_data.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes and ensure to add view: 02</span>.",
        "json": {"view": "02", "title": "This field is done", "price": 32.99}
    },
    "24": {
        "name": "api_06_products_03_create_view",
        "methods": ["POST"],
        "view": "03",
        "url": "api_06/products_03",
        "type": "class",
        "title": "Django Rest Framework Generics CreateAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py"],
        "special_note": "",
        "description": "Uses generics.CreateAPIView from rest_framework generics to retrieve the Product queryset from products_03 and uses serializers.ModelSerializer from rest_framework serializers to determine the output. Then uses the perform_create function of generics.CreateAPIView to check for the presence of content variable value and if none fills content variable with title value before saving the serializer.validated_data.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes and ensure to add view: 03</span>.",
        "json": {"view": "03", "title": "This field is done", "price": 32.99}
    },
    "25": {
        "name": "api_06_products_03_create_view",
        "methods": ["POST"],
        "view": "04",
        "url": "api_06/products_03",
        "type": "class",
        "title": "Django Rest Framework Generics CreateAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py"],
        "special_note": "",
        "description": "Uses generics.CreateAPIView from rest_framework generics to retrieve the Product queryset from products_03 and uses serializers.ModelSerializer from rest_framework serializers to determine the output. Then uses the perform_create function of generics.CreateAPIView to save the serializer.validated_data along with the self.request.user.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes and ensure to add view: 04</span>.",
        "json": {"view": "04", "title": "This field is done", "price": 32.99}
    },
    "26": {
        "name": "api_06_products_04_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_04",
        "type": "class",
        "title": "Django Rest Framework Generics ListAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "",
        "description": "Uses generics.ListAPIView from rest_framework generics to retrieve the Product queryset from products_04 and uses serializers.ModelSerializer from rest_framework serializers to determine the output.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "This field is done", "price": 32.99}
    },
    "27": {
        "name": "api_06_products_04_list_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_04/01",
        "type": "class",
        "title": "Django Rest Framework Generics ListCreateAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/list.py"],
        "special_note": "",
        "description": "Uses generics.ListCreateAPIView from rest_framework generics to retrieve the Product queryset from products_04 and uses serializers.ModelSerializer from rest_framework serializers to determine the output. Then uses the perform_create function of generics.ListCreateAPIView to check for the presence of content variable value and if none fills content variable with title value before saving the serializer.validated_data."
    },
    "28": {
        "name": "api_06_products_04_alt_view_01",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_04/02",
        "type": "function",
        "title": "Using Function Based Views For Create, Retrieve or List",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/detail.py", "py_client/list.py"],
        "special_note": "",
        "description": "Uses rest_framework.decorators api_view to restrict use to GET and POST requests only and retrieves the queryset from products_04 then passes the queryset in the ProductSerializer using many=true to return the data as a list.<br><span class=info>Optional: In console enter a space after the option number then the primary key for detail view else when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "This field is done", "price": 32.99}
    },
    "29": {
        "name": "api_06_products_04_alt_view_02",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_04/02/1",
        "detail": "api_06/products_04/02/",
        "type": "function",
        "title": "Using Function Based Views For Create, Retrieve or List",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/detail.py", "py_client/not_found.py"],
        "special_note": "",
        "description": "Uses rest_framework.decorators api_view to restrict use to GET and POST requests only and if a primary key submitted checks if the Product queryset from products_04 was retrieved and if not raises a Http404 from django.http.<br><span class=info>Optional: In console enter a space after the option number then the primary key for detail view else when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "This field is done", "price": 32.99}
    },
    "30": {
        "name": "api_06_products_04_alt_view_03",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_04/03/1",
        "detail": "api_06/products_04/03/",
        "type": "function",
        "title": "Using Function Based Views For Create, Retrieve or List",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/detail.py", "py_client/not_found.py"],
        "special_note": "",
        "description": "Uses rest_framework.decorators api_view to restrict use to GET and POST requests only and if a primary key submitted checks if the Product queryset from products_04 was retrieved get_object_or_404 from django.shortcuts.<br><span class=info>Optional: In console enter a space after the option number then the primary key for detail view else when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "This field is done", "price": 32.99}
    },
    "31": {
        "name": "product-edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_04/1/update",
        "detail": "api_06/products_04/?/update/",
        "type": "class",
        "title": "UpdateAPIView & DestroyAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_04 and uses the perform_update function to save the instance from the ProductSerializer of products_04 before setting the instance.content equal to the instance.title.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "32": {
        "name": "product-delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_04/1/delete",
        "detail": "api_06/products_04/?/delete/",
        "type": "class",
        "title": "UpdateAPIView & DestroyAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_04 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_04."
    },
    "33": {
        "name": "product_mixin_view_01",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_04/mixin",
        "type": "class",
        "title": "Mixins and a Generic API View",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/detail.py", "py_client/list.py"],
        "special_note": "",
        "description": "Uses mixins.ListModelMixin from rest_framework mixins and generics.GenericAPIView from rest_framework generics to retrieve the queryset from Product and a serializer_class from ProductSerializer of products_04 then uses the get function and self.list to list all products.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes for detail view else when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "This field is done", "price": 32.99}
    },
    "34": {
        "name": "product_mixin_view_02",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_04/mixin/1",
        "detail": "api_06/products_04/mixin/",
        "type": "class",
        "title": "Mixins and a Generic API View",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/detail.py", "py_client/list.py"],
        "special_note": "",
        "description": "Uses mixins.RetrieveModelMixin from rest_framework mixins and generics.GenericAPIView from rest_framework generics to retrieve the queryset from Product and a serializer_class from ProductSerializer of products_04 and uses the get function and if primary key present the self.retrieve to get product detail.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes for detail view else when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "This field is done", "price": 32.99}
    },
    "35": {
        "name": "api_06_products_05_detail_view",
        "methods": ["GET"],
        "view": "01",
        "url": "api_06/products_05/1",
        "detail": "api_06/products_05/",
        "type": "class",
        "title": "Django Rest Framework Generics RetrieveAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "",
        "description": "Uses generics.RetrieveAPIView from rest_framework generics to retrieve the Product queryset from products_05 and uses serializers.ModelSerializer from rest_framework serializers to determine the output.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "36": {
        "name": "api_06_products_05_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_05",
        "type": "class",
        "title": "Django Rest Framework Generics ListAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "",
        "description": "Uses generics.ListAPIView from rest_framework generics to retrieve the Product queryset from products_05 and uses serializers.ModelSerializer from rest_framework serializers to determine the output. Uses permission_classes variable of permissions.IsAuthenticated from rest_framework permissions to block read and write access to users not authenticated.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "37": {
        "name": "api_06_products_05_list_create_view_01",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_05/01",
        "type": "class",
        "title": "Django Rest Framework Generics ListAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "",
        "description": "Uses generics.ListAPIView from rest_framework generics to retrieve the Product queryset from products_05 and uses serializers.ModelSerializer from rest_framework serializers to determine the output. Uses permission_classes variable of permissions.IsAuthenticated from rest_framework permissions to block write or POST method access to users not authenticated.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "38": {
        "name": "api_06_products_05_list_create_view_02",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_05/02",
        "type": "class",
        "title": "Django Rest Framework Generics ListAPIView",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py"],
        "special_note": "",
        "description": "Uses generics.ListAPIView from rest_framework generics to retrieve the Product queryset from products_05 and uses serializers.ModelSerializer from rest_framework serializers to determine the output. Uses permission_classes variable of permissions.IsAuthenticated and authentication_classes variable of authentication.SessionAuthentication from rest_framework permissions & authentication to block write or POST method access to users not authenticated.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "39": {
        "name": "api_06_products_05_list_create_view_03",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "admin/products_05/product",
        "type": "class",
        "title": "User & Group Permissions with DjangoModelPermissions",
        "auth": {},
        "exclude_fields": [],
        "console_view": [],
        "special_note": "",
        "description": "Web based Admin access to Products. Uses generics.ListAPIView from rest_framework generics to retrieve the Product queryset from products_05 and uses serializers.ModelSerializer from rest_framework serializers to determine the output. Uses permission_classes variable of permissions.IsAuthenticated and authentication_classes variable of authentication.SessionAuthentication from rest_framework permissions & authentication to block write or POST method access to users not authenticated."
    },
    "40": {
        "name": "api_06_products_05_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_05/1/update",
        "detail": "api_06/products_05/?/update/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_05 and uses the perform_update function to save the instance from the ProductSerializer of products_05 before setting the instance.content equal to the instance.title.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "41": {
        "name": "api_06_products_05_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_05/1/delete",
        "detail": "api_06/products_05/?/delete/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_05 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_05."
    },
    "42": {
        "name": "api_06_products_06_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_06",
        "detail": "api_06/products_06/",
        "type": "class",
        "title": "Django Rest Framework Custom Permissions",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "",
        "description": "Uses a custom permission on permission_classes variable of IsStaffEditorPermission with the has_permission checking if the user has one of four permissions on a product (add_product, change_product, delete_product and view_product).<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "43": {
        "name": "api_06_products_06_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_06/1",
        "detail": "api_06/products_06/",
        "type": "class",
        "title": "Django Rest Framework Custom Permissions",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "",
        "description": "Uses a custom permission on permission_classes variable of IsStaffEditorPermission with the has_permission checking if the user has one of four permissions on a product (add_product, change_product, delete_product and view_product).<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "44": {
        "name": "api_06_products_06_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_06/1/update",
        "detail": "api_06/products_06/?/update/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_06 and uses the perform_update function to save the instance from the ProductSerializer of products_06 before setting the instance.content equal to the instance.title.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "45": {
        "name": "api_06_products_06_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_06/1/delete",
        "detail": "api_06/products_06/?/delete/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_06 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_06."
    },
    "46": {
        "name": "api_06_products_07_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_07",
        "detail": "api_06/products_07/",
        "type": "class",
        "title": "Django Rest Framework Custom Permissions",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "",
        "description": "Uses a custom permission on permission_classes variable of IsStaffEditorPermission with the has_permission set to check if the user has staff status and a perms_map that augments the permissions.DjangoModelPermissions of rest_framework permissions.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "47": {
        "name": "api_06_products_07_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_07/1",
        "detail": "api_06/products_07/",
        "type": "class",
        "title": "Django Rest Framework Custom Permissions",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "",
        "description": "Uses a custom permission on permission_classes variable of IsStaffEditorPermission with the has_permission set to check if the user has staff status and a perms_map that augments the permissions.DjangoModelPermissions of rest_framework permissions.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "48": {
        "name": "api_06_products_07_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_07/1/update",
        "detail": "api_06/products_07/?/update/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_07 and uses the perform_update function to save the instance from the ProductSerializer of products_07 before setting the instance.content equal to the instance.title.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "49": {
        "name": "api_06_products_07_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_07/1/delete",
        "detail": "api_06/products_07/?/delete/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_07 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_07."
    },
    "50": {
        "name": "api_06_products_08_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_08",
        "detail": "api_06/products_08/",
        "type": "class",
        "title": "Django Rest Framework Custom Permissions",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "",
        "description": "Uses a custom permission on permission_classes variable of IsStaffEditorPermission with only a perms_map that augments the permissions.DjangoModelPermissions of rest_framework permissions. Then adds then permissions.IsAdminUser from rest_framework permissions to the permission_classes.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "51": {
        "name": "api_06_products_08_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_08/1",
        "detail": "api_06/products_08/",
        "type": "class",
        "title": "Django Rest Framework Custom Permissions",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "",
        "description": "Uses a custom permission on permission_classes variable of IsStaffEditorPermission with only a perms_map that augments the permissions.DjangoModelPermissions of rest_framework permissions. Then adds then permissions.IsAdminUser from rest_framework permissions to the permission_classes.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "52": {
        "name": "obtain_auth_token",
        "methods": ["POST"],
        "view": "Token",
        "url": "api_06/products_08",
        "type": "class",
        "title": "Django Rest Framework Token Authentication",
        "auth": {"Authorization": "Token", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "",
        "description": "Uses rest_framework.authtoken.views obtain_auth_token in urls.py and authentication_class authentication.SessionAuthentication in products_08, then input and getpass to enter the user name & password sent with Authorization header Token.<br><span class=info>Only works in console</span>.",
        "json": {"title": "This field is done", "price": 32.99}
    },
    "53": {
        "name": "api_06_products_08_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_08/1/update",
        "detail": "api_06/products_08/?/update/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {"Authorization": "Token", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_08 and uses the perform_update function to save the instance from the ProductSerializer of products_08 before setting the instance.content equal to the instance.title.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "54": {
        "name": "api_06_products_08_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_08/1/delete",
        "detail": "api_06/products_08/?/delete/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {"Authorization": "Token", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_08 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_08."
    },
    "55": {
        "name": "api_06_products_09_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_09",
        "detail": "api_06/products_09/",
        "type": "class",
        "title": "Django Rest Framework Custom Permissions",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "",
        "description": "Moves authentication to api_06 App and uses a custom permission on permission_classes variable of IsStaffEditorPermission with only a perms_map that augments the permissions.DjangoModelPermissions of rest_framework permissions. Then adds then permissions.IsAdminUser from rest_framework permissions to the permission_classes.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "56": {
        "name": "api_06_products_09_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_09/1",
        "detail": "api_06/products_09/",
        "type": "class",
        "title": "Django Rest Framework Custom Permissions",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "",
        "description": "Moves authentication to api_06 App and uses a custom permission on permission_classes variable of IsStaffEditorPermission with only a perms_map that augments the permissions.DjangoModelPermissions of rest_framework permissions. Then adds then permissions.IsAdminUser from rest_framework permissions to the permission_classes.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "57": {
        "name": "obtain_auth_token",
        "methods": ["POST"],
        "view": "Bearer",
        "url": "api_06/products_09",
        "type": "class",
        "title": "Django Rest Framework Token Authentication",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "",
        "description": "Uses rest_framework.authtoken.views obtain_auth_token in urls.py and authentication_class authentication.SessionAuthentication in products_09, then input and getpass to enter the user name & password sent with Authorization header Bearer and creating an authentication.py in api_06.<br><span class=info>Only works in console</span>.",
        "json": {"title": "This field is done", "price": 32.99}
    },
    "58": {
        "name": "api_06_products_09_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_09/1/update",
        "detail": "api_06/products_09/?/update/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_09 and uses the perform_update function to save the instance from the ProductSerializer of products_09 before setting the instance.content equal to the instance.title.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "59": {
        "name": "api_06_products_09_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_09/1/delete",
        "detail": "api_06/products_09/?/delete/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_09 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_09."
    },
    "60": {
        "name": "api_06_products_10_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_10",
        "type": "class",
        "title": "Django Rest Framework Using Mixins for Permissions",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse function. Added UpdateValidator to validators to allow updating products and disallow changing title to one that already exists.",
        "description": "Uses StaffEditorPermissionMixin from api_06.mixins and no longer needs permission_classes and authentication_classes on each class. api_06.mixins permission_classes variable uses permissions.IsAdminUser from rest_framework permissions and the perms_map from permissions.DjangoModelPermissions of rest_framework permissions in the IsStaffEditorPermission class. Also implements URLS, Reverse Serializers to dynamically generate hyperlinked urls.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "61": {
        "name": "api_06_products_10_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_10/1",
        "detail": "api_06/products_10/",
        "type": "class",
        "title": "Django Rest Framework Using Mixins for Permissions",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse function. Added UpdateValidator to validators to allow updating products and disallow changing title to one that already exists.",
        "description": "Uses StaffEditorPermissionMixin from api_06.mixins and no longer needs permission_classes and authentication_classes on each class. api_06.mixins permission_classes variable uses permissions.IsAdminUser from rest_framework permissions and the perms_map from permissions.DjangoModelPermissions of rest_framework permissions in the IsStaffEditorPermission class. Also implements URLS, Reverse Serializers to dynamically generate hyperlinked urls.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "62": {
        "name": "api_06_home",
        "methods": ["GET"],
        "view": "Viewset",
        "url": "api_06/v2",
        "detail": "api_06/v2/",
        "type": "class",
        "title": "Django Rest Framework Viewsets",
        "auth": {},
        "exclude_fields": [],
        "console_view": [],
        "special_note": "",
        "description": "Uses rest_framework viewsets and rest_framework.routers DefaultRouter to view the Procuct model and serializer of products_10."
    },
    "63": {
        "name": "api_06_products_10_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_10/1/update",
        "detail": "api_06/products_10/?/update/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": ["url"],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_10 and uses the perform_update function to save the instance from the ProductSerializer of products_10 before setting the instance.content equal to the instance.title.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "64": {
        "name": "api_06_products_10_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_10/1/delete",
        "detail": "api_06/products_10/?/delete/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_10 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_10."
    },
    "65": {
        "name": "api_06_products_11_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_11",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse function. Added UpdateValidator to validators to allow updating products and disallow changing title to one that already exists.",
        "description": "Adds an email write only field to the Product Serializer, which prevents it being diplayed in the detail views and avalaible in the create views. Causes a lot of work arounds to ensure serializer.save and update functions do not fail. Forms auto-generated may not pick up the missing email field and attempts to create or update from them will fail.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "66": {
        "name": "api_06_products_11_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_11/1",
        "detail": "api_06/products_11/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse function. Added UpdateValidator to validators to allow updating products and disallow changing title to one that already exists.",
        "description": "Adds an email write only field to the Product Serializer, which prevents it being diplayed in the detail views and avalaible in the create views. Causes a lot of work arounds to ensure serializer.save and update functions do not fail. Forms auto-generated may not pick up the missing email field and attempts to create or update from them will fail.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "67": {
        "name": "api_06_products_11_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_11/1/update",
        "detail": "api_06/products_11/?/update/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": ["url"],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_11 and uses the perform_update function to save the instance from the ProductSerializer of products_11.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "68": {
        "name": "api_06_products_11_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_11/1/delete",
        "detail": "api_06/products_11/?/delete/",
        "type": "class",
        "title": "Model Serializer Create & Update Methods",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_11 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_11." 
    },
    "69": {
        "name": "api_06_products_12_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_12",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse function. Added UpdateValidator to validators to allow updating products and disallow changing title to one that already exists.",
        "description": "Validates the title field in the Product Serializer on Create POST.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "70": {
        "name": "api_06_products_12_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_12/1",
        "detail": "api_06/products_12/",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse function. Added UpdateValidator to validators to allow updating products and disallow changing title to one that already exists.",
        "description": "Validates the title field in the Product Serializer on Create POST.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "71": {
        "name": "api_06_products_12_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_12/1/update",
        "detail": "api_06/products_12/?/update/",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": ["url"],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_12 and uses the perform_update function to save the instance from the ProductSerializer of products_12.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "72": {
        "name": "api_06_products_12_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_12/1/delete",
        "detail": "api_06/products_12/?/delete/",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_12 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_12." 
    },
    "73": {
        "name": "api_06_products_13_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_13",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse function. Added UpdateValidator to validators to allow updating products and disallow changing title to one that already exists.",
        "description": "Adds validators then imports validators into serailzers and adds a title serializers.Charfield with the parameter validators set to the validators method(s) to validate the title field in on Create POST.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "74": {
        "name": "api_06_products_13_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_13/1",
        "detail": "api_06/products_13/",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse function. Added UpdateValidator to validators to allow updating products and disallow changing title to one that already exists.",
        "description": "Adds validators then imports validators into serailzers and adds a title serializers.Charfield with the parameter validators set to the validators method(s) to validate the title field in on Create POST.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "75": {
        "name": "api_06_products_13_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_13/1/update",
        "detail": "api_06/products_13/?/update/",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": ["url"],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_13 and uses the perform_update function to save the instance from the ProductSerializer of products_13.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "76": {
        "name": "api_06_products_13_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_13/1/delete",
        "detail": "api_06/products_13/?/delete/",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_13 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_13." 
    },
    "77": {
        "name": "api_06_products_14_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_14",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse function. Added UpdateValidator to validators to allow updating products and disallow changing title to one that already exists.",
        "description": "Uses rest_framework.validators UniqueValidator in validators then imports validators into serailzers and adds a title serializers.Charfield with the parameter validators set to the validators method(s) to validate the title field in on Create POST.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "78": {
        "name": "api_06_products_14_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_14/1",
        "detail": "api_06/products_14/",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse function. Added UpdateValidator to validators to allow updating products and disallow changing title to one that already exists.",
        "description": "Uses rest_framework.validators UniqueValidator in validators then imports validators into serailzers and adds a title serializers.Charfield with the parameter validators set to the validators method(s) to validate the title field in on Create POST.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "79": {
        "name": "api_06_products_14_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_14/1/update",
        "detail": "api_06/products_14/?/update/",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": ["url"],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_14 and uses the perform_update function to save the instance from the ProductSerializer of products_14.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "80": {
        "name": "api_06_products_14_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_14/1/delete",
        "detail": "api_06/products_14/?/delete/",
        "type": "class",
        "title": "Custom Validation With Serializers",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_14 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_14." 
    },
    "81": {
        "name": "api_06_products_15_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_15",
        "type": "class",
        "title": "Request User Data and Customize View Queryset",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds user to model with models.ForeignKey using the default user settings and defaults to the first user. Allows null values and sets the value to none if the user is deleted to prevent delete cascading. Adds get_queryset method to ProductListCreateAPIView to get the user from the request and return no Products if the user is not authenticated otherwise only returns Products created by that user.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "82": {
        "name": "api_06_products_15_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_15/1",
        "detail": "api_06/products_15/",
        "type": "class",
        "title": "Request User Data and Customize View Queryset",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds user to model with models.ForeignKey using the default user settings and defaults to the first user. Allows null values and sets the value to none if the user is deleted to prevent delete cascading. Adds get_queryset method to ProductListCreateAPIView to get the user from the request and return no Products if the user is not authenticated otherwise only returns Products created by that user.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "83": {
        "name": "api_06_products_15_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_15/1/update",
        "detail": "api_06/products_15/?/update/",
        "type": "class",
        "title": "Request User Data and Customize View Queryset",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": ["url"],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_15 and uses the perform_update function to save the instance from the ProductSerializer of products_15.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "84": {
        "name": "api_06_products_15_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_15/1/delete",
        "detail": "api_06/products_15/?/delete/",
        "type": "class",
        "title": "Request User Data and Customize View Queryset",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_15 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_15." 
    },
    "85": {
        "name": "api_06_products_16_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_16",
        "type": "class",
        "title": "Request User Data Queryset Mixin",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds a UserQuerySetMixin to api_06. Adds queryset to View constructors to get the user from the request and return no Products if the user is not authenticated otherwise only returns Products created by that user.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "86": {
        "name": "api_06_products_16_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_16/1",
        "detail": "api_06/products_16/",
        "type": "class",
        "title": "Request User Data Queryset Mixin",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds a UserQuerySetMixin to api_06. Adds queryset to View constructors to get the user from the request and return no Products if the user is not authenticated otherwise only returns Products created by that user.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "87": {
        "name": "api_06_products_16_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_16/1/update",
        "detail": "api_06/products_16/?/update/",
        "type": "class",
        "title": "Request User Data Queryset Mixin",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": ["url"],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_16 and uses the perform_update function to save the instance from the ProductSerializer of products_16.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "88": {
        "name": "api_06_products_16_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_16/1/delete",
        "detail": "api_06/products_16/?/delete/",
        "type": "class",
        "title": "Request User Data Queryset Mixin",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_16 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_16." 
    },
    "89": {
        "name": "api_06_products_17_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_17",
        "type": "class",
        "title": "Related Fields and Foreign Key Serializer",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds to api_06 UserPublicSerializer to display id and username fields and populates an other_products field with the primary key, url and title from UserProductInlineSerializer then imports UserPublicSerializer in to products_17 serializers and initiates it by assigning it to a variable with the parameters read_only=True.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "90": {
        "name": "api_06_products_17_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_17/1",
        "detail": "api_06/products_17/",
        "type": "class",
        "title": "Related Fields and Foreign Key Serializer",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds to api_06 UserPublicSerializer to display id and username fields and populates an other_products field with the primary key, url and title from UserProductInlineSerializer then imports UserPublicSerializer in to products_17 serializers and initiates it by assigning it to a variable with the parameters read_only=True.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "91": {
        "name": "api_06_products_17_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_17/1/update",
        "detail": "api_06/products_17/?/update/",
        "type": "class",
        "title": "Related Fields and Foreign Key Serializer",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": ["url"],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_17 and uses the perform_update function to save the instance from the ProductSerializer of products_17.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "92": {
        "name": "api_06_products_17_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_17/1/delete",
        "detail": "api_06/products_17/?/delete/",
        "type": "class",
        "title": "Related Fields and Foreign Key Serializer",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_17 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_17." 
    },
    "93": {
        "name": "api_06_products_18_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_18",
        "type": "class",
        "title": "Pagination",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds to api_06 UserPublicSerializer to display id and username fields and populates an other_products field with the primary key, url and title from UserProductInlineSerializer then imports UserPublicSerializer in to products_18 serializers and initiates it by assigning it to a variable with the parameters read_only=True.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "94": {
        "name": "api_06_products_18_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_18/1",
        "detail": "api_06/products_18/",
        "type": "class",
        "title": "Pagination",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds to api_06 UserPublicSerializer to display id and username fields and populates an other_products field with the primary key, url and title from UserProductInlineSerializer then imports UserPublicSerializer in to products_18 serializers and initiates it by assigning it to a variable with the parameters read_only=True.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "95": {
        "name": "api_06_products_18_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_18/1/update",
        "detail": "api_06/products_18/?/update/",
        "type": "class",
        "title": "Pagination",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": ["url"],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_18 and uses the perform_update function to save the instance from the ProductSerializer of products_18.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "96": {
        "name": "api_06_products_18_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_18/1/delete",
        "detail": "api_06/products_18/?/delete/",
        "type": "class",
        "title": "Pagination",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_18 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_18." 
    },
    "97": {
        "name": "search_19",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/search/19",
        "type": "class",
        "title": "A Django Based Search for our Product API",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": [],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds to products_19.models ProductManager and ProductQuerySet and makes objects = ProductManager() to enable searches on the model for items that are public. Then adds a search app."
    },
    "98": {
        "name": "api_06_products_19_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_19",
        "type": "class",
        "title": "A Django Based Search for our Product API",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds to products_19.models ProductManager and ProductQuerySet and makes objects = ProductManager() to enable searches on the model for items that are public. Then adds a search app.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "99": {
        "name": "api_06_products_19_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_19/1",
        "detail": "api_06/products_19/",
        "type": "class",
        "title": "A Django Based Search for our Product API",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds to products_19.models ProductManager and ProductQuerySet and makes objects = ProductManager() to enable searches on the model for items that are public. Then adds a search app.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "100": {
        "name": "api_06_products_19_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_19/1/update",
        "detail": "api_06/products_19/?/update/",
        "type": "class",
        "title": "A Django Based Search for our Product API",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": ["url"],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_19 and uses the perform_update function to save the instance from the ProductSerializer of products_19.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "101": {
        "name": "api_06_products_19_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_19/1/delete",
        "detail": "api_06/products_19/?/delete/",
        "type": "class",
        "title": "A Django Based Search for our Product API",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_19 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_19." 
    },
    "102": {
        "name": "api_06_products_20_list_create_view",
        "methods": ["GET", "POST"],
        "view": "",
        "url": "api_06/products_20",
        "type": "class",
        "title": "Unified Design of Serializers & Indices",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": ["py_client/create.py", "py_client/list.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds to products_20.models a property decorator and body method that returns the value of content then adds body as a serializers.CharField with it's source being content to products_10.serializers and replaces content in the fields array with body.<br><span class=info>Optional: In console when creating a new item enter a space after the option number then the json object surrounding both key and value in double quotes</span>.",
        "json": {"title": "Hello world", "price": "134.00"}
    },
    "103": {
        "name": "api_06_products_20_detail_view",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/products_20/1",
        "detail": "api_06/products_20/",
        "type": "class",
        "title": "Unified Design of Serializers & Indices",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/detail.py"],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds to products_20.models a property decorator and body method that returns the value of content then adds body as a serializers.CharField with it's source being content to products_10.serializers and replaces content in the fields array with body.<br><span class=info>Optional: In console enter a space after the option number then the product number</span>."
    },
    "104": {
        "name": "api_06_products_20_edit",
        "methods": ["PUT"],
        "view": "",
        "url": "api_06/products_20/1/update",
        "detail": "api_06/products_20/?/update/",
        "type": "class",
        "title": "Unified Design of Serializers & Indices",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": ["url"],
        "console_view": ["py_client/update.py"],
        "special_note": "",
        "replace": [{"content": "body"}],
        "description": "Uses generics.UpdateAPIView from rest_framework generics to retrieve the queryset from Product of products_20 and uses the perform_update function to save the instance from the ProductSerializer of products_20.<br><span class=info>Optional: In console enter a space after the option number then the primary key another space and a json object surrounding both keys and values in double quotes</span>.",
        "json": {"title": "Hello world my old friend", "price": 129.99},
        "load_content": true
    },
    "105": {
        "name": "api_06_products_20_delete",
        "methods": ["DELETE"],
        "view": "",
        "url": "api_06/products_20/1/delete",
        "detail": "api_06/products_20/?/delete/",
        "type": "class",
        "title": "Unified Design of Serializers & Indices",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth"},
        "exclude_fields": [],
        "console_view": ["py_client/delete.py"],
        "special_note": "",
        "description": "Uses generics.DestroyAPIView from rest_framework generics to retrieve the queryset from Product of products_20 and uses the perform_destroy function and super().perform_destroy() to delete the instance from the ProductSerializer of products_20." 
    },
    "106": {
        "name": "search_20",
        "methods": ["GET"],
        "view": "",
        "url": "api_06/search/20",
        "type": "class",
        "title": "Unified Design of Serializers & Indices",
        "auth": {"Authorization": "Bearer", "url": "api_06/auth", "view": "01"},
        "exclude_fields": [],
        "console_view": [],
        "special_note": "Added ViewNameSerializer to api_06 to ensure that the correct product details view name is passed in to the view_name parameter of the url serializers.HyperlinkedIdentityField. Added a value to the related_name parameter of models.ForeignKe Then added get_detail_name function to api_06 to get the correct product details view name to be passed in to the rest_framework.reverse reverse functions.y referenced by the use variable of the App models, then altered any calls to product_set to use the related_name instead.",
        "description": "Adds to products_20.models ProductManager and ProductQuerySet and makes objects = ProductManager() to enable searches on the model for items that are public. Then adds a search app."
    },
    "107": {
        "name": "token_obtain_pair",
        "methods": ["POST"],
        "view": "Bearer",
        "url": "api_06/token",
        "type": "class",
        "title": "JSON WEB Token Authentication with simplejwt",
        "auth": {},
        "exclude_fields": [],
        "console_view": ["jwt.py"],
        "special_note": "Change to Token in api_06.authentication to run. jwt.py will only work with Bearer and not Token.",
        "description": "Uses rest_framework_simplejwt.views obtain, refresh and verify tokens."
    },
    "108": {
        "name": "javascipt_client",
        "methods": ["GET"],
        "view": "",
        "url": "http://localhost:8111",
        "type": "html",
        "title": "Login via Javascript Client",
        "auth": {},
        "exclude_fields": [],
        "console_view": [],
        "special_note": "Change to Token in api_06.authentication to run. jwt.py will only work with Bearer and not Token. Then navigate to the js_client folder and run: python -m http.server 8111",
        "description": "Added a JavaScript client with a simple html page and javascript file then runs them as a web server using python. Uses the jwt tokens from JSON WEB Token Authentication with simplejwt to access, refresh and verify."
    }
  }
}
